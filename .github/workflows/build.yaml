name: "Build"

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Print github
        env:
          json_github: ${{ toJSON(github) }}
        run: |
          echo $json_github

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          # Needed to trigger release/* events
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
          # "events triggered by the GITHUB_TOKEN ... will not create a new workflow run"
          token: ${{ secrets.ADMIN_PERSONAL_ACCESS_TOKEN }}

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Install dependencies
        run: npm install

      - name: Configure git
        run: |
          git config user.name 'github-action'
          git config user.email 'github-actions@github.com'

      - name: Get latest version2
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const result = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: 'latest',
            });
            console.log(result.data.name)
            return result.data.name

      - name: Print step
        env:
          steps: ${{ toJSON(steps) }}
        run: |
          echo $steps

      - name: Get latest version
        run: |
          echo "latest_version=$( \
            curl -fs https://api.github.com/repos/kellengreen/ci-testing/releases/latest | jq -r .body
          )" >> ${GITHUB_ENV}

      - name: Bump version
        env:
          level: |
            ${{
              contains(github.event.pull_request.labels.*.name, 'major') && 'major' ||
              contains(github.event.pull_request.labels.*.name, 'minor') && 'minor' ||
              contains(github.event.pull_request.labels.*.name, 'patch') && 'patch' || ''
            }}
        run: |
          echo "new_version=$( \
            npm version $(npx semver -i $level ${{ env.latest_version }}) --git-tag-version=false \
          )" >> ${GITHUB_ENV}

      - name: Commit release branch
        run: |
          git add -A
          git commit -m ${{ env.new_version }}
          git checkout -b "release/${{ env.new_version }}"
          git push origin HEAD
